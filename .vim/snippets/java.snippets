## Access Modifiers
snippet po
	protected ${0}
snippet pu
	public ${0}
snippet pr
	private ${0:Name}
snippet prv
	private ${1:String} ${2:variableName};${0}

snippet pix
	public interface ${1:InterfaceName} extends ${2:Parent} {
		${0://code goes here}
	}

snippet meth
	${1:public/protected/private} ${2:ReturnType} ${3:methName}(${4:params}){
		${0://code goes here}
	}

snippet puf
	public ${1:String} ${2:funcName} (${3}){
		${0://code}
	}
##
## Annotations
snippet @B
	@Bean
	${1:meth}
snippet @aw
	@Autowired
	${0}
snippet @ov
	@Override
	${0}
snippet @rqm
	@RequestMapping("${1:/the-endpoint}")
	${0:handler}
snippet @rp
	@RequestParam(value="${1:paramName}", defaultValue="${2:defaultValue}") ${3:String} $1 ${4:params}
snippet before
	@Before
	static void ${1:intercept}(${2:args}) { ${0} }
snippet mm
	@ManyToMany
	${0}
snippet om
	@OneToMany${1:(cascade=CascadeType.ALL)}
	${0}
snippet oo
	@OneToOne
	${1}
snippet @C
	@Column(name="${1:columnName}", columnDefinition = "${2}"${3})${0}
snippet @AT
	@AssertTrue(message = "${1}")${0}
##
snippet @JC
	@JoinColumn(name = "${1}", insertable = false, updatable = false)${0}

snippet @mto
	@ManyToOne${0}

## Basic Java packages and import
snippet ims
	import org.springframework.${1};${0}
snippet imju
	import java.util.${1:Stuff};${0}
snippet imval
	import javax.validation.constraints.${1:NonEmpty};${0}
snippet im
	import ${1};${0}
snippet imx
	import javax.${1};${0}
snippet imxp
	import javax.persistence.${1};${0}
snippet imhb
	import org.hibernate.${1};${0}
snippet imlo
	import lombok.${1:Data};${0}
##
snippet pa
	package ${1};
	${0}
## Class
snippet pcl
	public class ${1:ClassName} ${2} {
		${3://Code goes her}
	}
snippet cl
	class ${1:`vim_snippets#Filename("$1", "untitled")`} {
		${0}
	}
snippet pclc
	public class ${1:`vim_snippets#Filename("$1", "untitled")`} ${2} {
		public $1(${3:Params}){
			${4://Default constructor}
		}
		${0://code goes here}
	}
snippet in
	interface ${1:`vim_snippets#Filename("$1", "untitled")`} ${2:extends Parent}
snippet tc
	public class ${1:`vim_snippets#Filename("$1")`} extends ${0:TestCase}
##
## Class Enhancements
snippet ext
	extends ${0}
snippet imp
	implements ${0}
##
## Comments
snippet /*
	/*
	 * ${0}
	 */
##
## Constants
snippet co
	static public final ${1:String} ${2:var} = ${3};
snippet cos
	static public final String ${1:var} = "${2}";
##
## Control Statements
snippet ife
	if(${1}) {
		${2}
	} else {
		${0}
	}
snippet case
	case ${1}:
		${0}
snippet def
	default:
		${0}
snippet el
	else
snippet eif
	else if (${1}) ${0}
snippet if
	if (${1}) {
		${0}
	}
snippet sw
	switch (${1}) {
		case ${2}:
			${3}
		break;
	}

snippet cs
	case ${1}:
		${0}
	break;
##
## Create a Variable
snippet v
	${1:String} ${2:var}${3: = null}${4};
##
## Declaration for ArrayList
snippet d.v
	${1:Type} ${2:var} = new ${3}(${4});
	${0}
snippet d.al
	List<${1:Object}> ${2:list} = new ArrayList<$1>();${0}
## Declaration for HashMap
snippet d.hm
	Map<${1:Object}, ${2:Object}> ${3:map} = new HashMap<$1, $2>();${0}
## Declaration for HashSet
snippet d.hs
	Set<${1:Object}> ${2:set} = new HashSet<$1>();${0}
## Declaration for Stack
snippet d.st
	Stack<${1:Object}> ${2:stack} = new Stack<$1>();${0}
##
## Singleton Pattern
snippet singlet
	private static class Holder {
		private static final ${1:`vim_snippets#Filename("$1")`} INSTANCE = new $1();
	}

	private $1() { }

	public static $1 getInstance() {
		return Holder.INSTANCE;
	}
##
## Enhancements to Methods, variables, classes, etc.
snippet ab
	abstract ${0}
snippet fi
	final ${0}
snippet st
	static ${0}
snippet sy
	synchronized ${0}
##
## Error Methods
snippet err
	System.err.print("${0:Message}");
snippet errf
	System.err.printf("${1:Message}", ${0:exception});
snippet errln
	System.err.println("${0:Message}");
##
## Exception Handling
snippet as
	assert ${1:test} : "${2:Failure message}";
snippet ae
	assertEquals("${1:Failure message}", ${2:expected}, ${3:actual});
snippet aae
	assertArrayEquals("${1:Failure message}", ${2:expecteds}, ${3:actuals});
snippet af
	assertFalse("${1:Failure message}", ${2:condition});
snippet at
	assertTrue("${1:Failure message}", ${2:condition});
snippet an
	assertNull("${1:Failure message}", ${2:object});
snippet ann
	assertNotNull("${1:Failure message}", ${2:object});
snippet ass
	assertSame("${1:Failure message}", ${2:expected}, ${3:actual});
snippet asns
	assertNotSame("${1:Failure message}", ${2:expected}, ${3:actual});
snippet fa
	fail("${1:Failure message}");
snippet ca
	catch(${1:Exception} ${2:e}) ${0}
snippet thr
	throw ${0}
snippet ths
	throws ${0}
snippet try
	try {
		${0}
	} catch(${1:Exception} ${2:e}) {
		${3}
	}
snippet tryf
	try {
		${0}
	} catch(${1:Exception} ${2:e}) {
	} finally {
	}
##
## Find Methods
snippet findall
	List<${1:listName}> ${2:items} = ${1}.findAll();
snippet findbyid
	${1:var} ${2:item} = ${1}.findById(${3});
##
## Javadocs
snippet /**
	/**
	 * ${0}
	 */
snippet @au
	@author `system("grep \`id -un\` /etc/passwd | cut -d \":\" -f5 | cut -d \",\" -f1")`
snippet @br
	@brief ${0:Description}
snippet @fi
	@file ${0:`vim_snippets#Filename("$1")`}.java
snippet @pa
	@param ${0:param}
snippet @ret
	@return ${0:param}
##
## Logger Methods
snippet debug
	Logger.debug(${1:param});
snippet error
	Logger.error(${1:param});
snippet info
	Logger.info(${1:param});
snippet warn
	Logger.warn(${1:param});
##
## Loops
snippet enfor
	for (${1} : ${2}) {
		${0}
	}
snippet for
	for (${1}; ${2}; ${3}) ${0}
snippet wh
	while (${1}) ${0}
##
## Main method
snippet main
	public static void main (String[] args) {
		${0}
	}
##
## Print Methods
snippet print
	System.out.print("${0:Message}");
snippet printf
	System.out.printf("${1:Message}", ${0:args});
snippet println
	System.out.println(${0});
snippet printlna
	System.out.println(Arrays.toString(${0}));

snippet ----
	System.out.println("--------------------------------------------------------");
	System.out.println(${1:VariableOrExpression});
	System.out.println("--------------------------------------------------------");
##
## Render Methods
snippet ren
	render(${1:param});
snippet rena
	renderArgs.put("${1}", ${2});
snippet renb
	renderBinary(${1:param});
snippet renj
	renderJSON(${1:param});
snippet renx
	renderXml(${1:param});
##
## Setter and Getter Methods
snippet set
	${1:public} void set${3:}(${2:String} ${0:}){
		this.$4 = $4;
	}
snippet get
	${1:public} ${2:String} get${3:}(){
		return this.${0:};
	}
##
## Terminate Methods or Loops
snippet ret
	return ${1:valueOrExpression};${0}
snippet br
	break;
##
## Test Methods
snippet t
	public void test${1:Name}() throws Exception {
		${0}
	}
snippet test
	@Test
	public void test${1:Name}() throws Exception {
		${0}
	}
##
## Utils
snippet Sc
	Scanner
##
## Miscellaneous
snippet action
	public static void ${1:index}(${2:args}) { ${0} }
snippet rnf
	notFound(${1:param});
snippet rnfin
	notFoundIfNull(${1:param});
snippet rr
	redirect(${1:param});
snippet ru
	unauthorized(${1:param});
snippet unless
	(unless=${1:param});

snippet @nn
	@NotNull(message="${1:validationMessageText}")
	private ${2:String} ${3:variable};
	${0}
snippet @atru
	@AssertTrue(message="${1:validationMessageText}")
	${0}
snippet @sz
	@Size(min = ${1}, max = ${2}, message = "${3:some validation message}")${0}

snippet dto
	package ${1:package};

	import lombok.Data;
	import lombok.AllArgsConstructor;
	import lombok.NoArgsConstructor;
	import javax.validation.constraints.NotNull;
	import javax.validation.constraints.AssertTrue;
	${2}
	@Data
	@AllArgsConstructor
	@NoArgsConstructor
	public class ${3:ClassName}{
		${0://Code goes here}
	}

snippet entityGuid
	package xtpt.${1:models.};

	import lombok.Data;
	import lombok.NoArgsConstructor;
	import lombok.AllArgsConstructor;
	import javax.persistence.Entity;
	import javax.persistence.Table;
	import javax.persistence.PreUpdate;
	import javax.persistence.PrePersist;
	import javax.persistence.Id;
	import javax.persistence.GeneratedValue;
	import org.hibernate.annotations.GenericGenerator;
	import javax.persistence.Column;
	import java.util.Date;

	@Entity
	@Table(name = "${2:table_name}")
	@Data
	@AllArgsConstructor
	@NoArgsConstructor
	public class ${3:ClassName} {
		@Id
		@GeneratedValue(generator = "theGuid")
		@GenericGenerator(name = "theGuid", strategy = "guid")
		@Column(name = "Id", columnDefinition = "${4:uniqueidentifier}")
		private String id;

		${0: //code goes here}
	}

snippet jparepo
	package xtpt.${1};

	import org.springframework.data.jpa.repository.JpaRepository;
	import org.springframework.data.jpa.repository.Query;
	import org.springframework.data.repository.query.Param;
	import org.springframework.data.domain.Pageable;

	public interface ${2}Repository extends JpaRepository<${3:$2}, ${4:String}> {
		${0://Code goes here}
	}

## Simple data types
snippet St
	String ${0}
snippet lg
	long ${0}
snippet fl
	float ${0}
snippet bl
	boolean ${0}


snippet @JI
	@JsonIgnore
	${0}
